// api/bot.js

const fs = require('fs');
const path = require('path');
const { Telegraf, Markup } = require('telegraf');
const sqlite3 = require('sqlite3').verbose();

// ‚îÄ‚îÄ‚îÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ users.db –≤ /tmp ‚îÄ‚îÄ‚îÄ

// –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (read-only)
const SOURCE_DB = path.resolve(__dirname, '../users.db');
// –ü—É—Ç—å, –∫—É–¥–∞ –º—ã —Å–∫–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–ª—è –∑–∞–ø–∏—Å–∏
const TMP_DB = '/tmp/users.db';

// –ï—Å–ª–∏ –≤ /tmp/users.db –µ—â—ë –Ω–µ—Ç –∫–æ–ø–∏–∏, –∞ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –∫–æ–ø–∏—Ä—É–µ–º
if (!fs.existsSync(TMP_DB) && fs.existsSync(SOURCE_DB)) {
  try {
    fs.copyFileSync(SOURCE_DB, TMP_DB);
    console.log('üìÅ –ö–æ–ø–∏—è users.db —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ /tmp/users.db');
  } catch (e) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å users.db –≤ /tmp:', e);
  }
}

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –∏–∑ /tmp
let db;
try {
  db = new sqlite3.Database(TMP_DB);
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –∏–∑ /tmp:', err);
}

// ‚îÄ‚îÄ‚îÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ ‚îÄ‚îÄ‚îÄ
// (—Ç–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const bot = new Telegraf(process.env.BOT_TOKEN);

// ‚îÄ‚îÄ‚îÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ cold start ‚îÄ‚îÄ‚îÄ
(async () => {
  try {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ BASE_URL –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–ª—ç—à–∞
    const url = `${process.env.BASE_URL}/api/bot`;
    await bot.telegram.setWebhook(url);
    console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞', url);
  } catch (err) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook:', err);
  }
})();

// ‚îÄ‚îÄ‚îÄ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π INSERT ‚îÄ‚îÄ‚îÄ
if (db) {
  db.serialize(() => {
    // –ü–æ–ø—ã—Ç–∫–∏ ALTER TABLE –º–æ–≥—É—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ –µ—Å—Ç—å. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    db.run(`ALTER TABLE users ADD COLUMN tg TEXT`,      () => {});
    db.run(`ALTER TABLE users ADD COLUMN category TEXT`,() => {});
    db.run(`ALTER TABLE users ADD COLUMN count INTEGER DEFAULT 0`,       () => {});
    db.run(`ALTER TABLE users ADD COLUMN creativity TEXT`,() => {});
    db.run(`ALTER TABLE users ADD COLUMN gender TEXT`,   () => {});

    db.run(`
      CREATE TABLE IF NOT EXISTS users (
        chat_id    INTEGER PRIMARY KEY,
        name       TEXT,
        about      TEXT,
        tg         TEXT,
        category   TEXT,
        count      INTEGER DEFAULT 0,
        creativity TEXT,
        gender     TEXT
      )
    `);

    db.run(`
      CREATE TABLE IF NOT EXISTS meetings (
        chat_id  INTEGER,
        meet_id  TEXT,
        UNIQUE(chat_id, meet_id)
      )
    `);

    db.run(`
      CREATE TABLE IF NOT EXISTS pairs (
        user_id    INTEGER,
        partner_id INTEGER,
        UNIQUE(user_id, partner_id)
      )
    `);

    // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–∏–º –ø–∞—Ä–æ—á–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π (ID —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
    db.run(
      `INSERT OR IGNORE INTO users(chat_id,name,about,tg,category,count,creativity,gender)
       VALUES(?,?,?,?,?,?,?,?)`,
      [-1, '–ê–ª–∏—Å–∞',  '–õ—é–±–ª—é –≥—É–ª—è—Ç—å',        '@alice_bot',      'friendship', 0, null,      null]
    );
    db.run(
      `INSERT OR IGNORE INTO users(chat_id,name,about,tg,category,count,creativity,gender)
       VALUES(?,?,?,?,?,?,?,?)`,
      [-2, '–ë–æ—Ä–∏—Å',  '–ü–∏—à—É —Å—Ç–∏—Ö–∏ –∫–∞–∂–¥—ã–π',   '@boris_creative', 'collab',     0, '–ø–∏—à—É —Å—Ç–∏—Ö–∏ –∫–∞–∂–¥—ã–π', null]
    );
    // ‚Ä¶ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ ‚Ä¶
  });
} else {
  console.warn('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω.');
}

// ‚îÄ‚îÄ‚îÄ –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ ‚îÄ‚îÄ‚îÄ
const states = new Map();

// ‚îÄ‚îÄ‚îÄ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ‚îÄ‚îÄ‚îÄ
async function showMeetButton(ctx) {
  await ctx.reply(
    'üìã',
    Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
  );
}
async function beginRegistration(ctx) {
  const id = ctx.chat.id;
  if (db) {
    db.run(`DELETE FROM users WHERE chat_id = ?`, [id]);
    db.run(`DELETE FROM meetings WHERE chat_id = ?`, [id]);
    db.run(`DELETE FROM pairs WHERE user_id = ? OR partner_id = ?`, [id, id]);
  }
  states.delete(id);

  await ctx.reply('üëã –ß—Ç–æ–±—ã –≤—Å—Ç—Ä–µ—á–∞—Ç—å –¥—Ä—É–∑–µ–π PIMS, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.');
  states.set(id, { step: 'name', mode: 'register' });
  await ctx.reply('üìã –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:', Markup.removeKeyboard());
}

// ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚îÄ‚îÄ‚îÄ
bot.start(async (ctx) => {
  const id = ctx.chat.id;
  const meet_id = ctx.startPayload;

  let userExists = false;
  if (db) {
    userExists = await new Promise(res =>
      db.get(`SELECT 1 FROM users WHERE chat_id = ?`, [id], (_, row) => res(!!row))
    );
  }

  if (meet_id && userExists) {
    // –ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º meet_id
    const already = await new Promise(res =>
      db.get(
        `SELECT 1 FROM meetings WHERE chat_id = ? AND meet_id = ?`,
        [id, meet_id],
        (_, row) => res(!!row)
      )
    );
    if (already) {
      return ctx.reply('‚ùó –í—Å—Ç—Ä–µ—á–∞ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞');
    } else {
      db.run(`INSERT INTO meetings(chat_id, meet_id) VALUES(?,?)`, [id, meet_id]);
      db.run(`UPDATE users SET count = count + 1 WHERE chat_id = ?`, [id]);
      return ctx.reply('‚ûï –í—Å—Ç—Ä–µ—á–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞');
    }
  }

  if (userExists) {
    return showMeetButton(ctx);
  }
  return beginRegistration(ctx);
});

// ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É¬ª ‚îÄ‚îÄ‚îÄ
async function handleMeet(ctx) {
  const id = ctx.chat.id;
  let user = null;
  if (db) {
    user = await new Promise(res =>
      db.get(`SELECT count, gender, creativity, name, about, tg FROM users WHERE chat_id = ?`, [id], (_, r) => res(r))
    );
  }
  if (!user) {
    return beginRegistration(ctx);
  }
  if (user.count < 1) {
    return ctx.reply(
      '–í—Å—Ç—Ä–µ—á –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî –º–æ–∂–µ—Ç, –ø–æ —Å—Ç–∞–∫–∞–Ω—á–∏–∫—É PIMS? üçπ',
      Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
    );
  }
  return ctx.reply(
    'üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á–∏:',
    Markup.keyboard([
      ['ü§ù –î—Ä—É–∂–±–∞'],
      ['üí° –°–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
      ['‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è']
    ])
      .resize()
      .oneTime(true)
  );
}
bot.command('meet', handleMeet);
bot.hears('üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É', handleMeet);

// ‚îÄ‚îÄ‚îÄ ¬´–°–µ–∫—Ä–µ—Ç–Ω–∞—è¬ª –∫–æ–º–∞–Ω–¥–∞ ¬´–≤—Å—Ç—Ä–µ—á–∏N¬ª ‚îÄ‚îÄ‚îÄ
bot.hears(/^–≤—Å—Ç—Ä–µ—á–∏(\d+)$/i, async (ctx) => {
  const id = ctx.chat.id;
  const num = parseInt(ctx.match[1], 10);
  if (isNaN(num) || num <= 0) {
    return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–≤—Å—Ç—Ä–µ—á–∏<number>¬ª.');
  }
  if (!db) {
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
  }
  const user = await new Promise(res =>
    db.get(`SELECT count FROM users WHERE chat_id = ?`, [id], (_, r) => res(r))
  );
  if (!user) {
    return beginRegistration(ctx);
  }
  db.run(`UPDATE users SET count = count + ? WHERE chat_id = ?`, [num, id]);
  const newCount = await new Promise(res =>
    db.get(`SELECT count FROM users WHERE chat_id = ?`, [id], (_, r) => res(r))
  ).then(r => r.count);
  return ctx.reply(
    `üõ† –î–æ–±–∞–≤–ª–µ–Ω–æ ${num} –≤—Å—Ç—Ä–µ—á. –í—Å–µ–≥–æ: ${newCount}`,
    Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
  );
});

// ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (¬´–î—Ä—É–∂–±–∞¬ª, ¬´–°–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ¬ª, ¬´–û—Ç–Ω–æ—à–µ–Ω–∏—è¬ª) ‚îÄ‚îÄ‚îÄ
bot.hears(['ü§ù –î—Ä—É–∂–±–∞', 'üí° –°–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è'], async (ctx) => {
  const id = ctx.chat.id;
  const text = ctx.message.text;
  const state = states.get(id);

  // –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (step === 'category')
  if (state && state.step === 'category') {
    const map = {
      'ü§ù –î—Ä—É–∂–±–∞':       ['friendship', '–î—Ä—É–∂–±–∞'],
      'üí° –°–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ': ['collab',     '–°–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
      '‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è':    ['love',       '–û—Ç–Ω–æ—à–µ–Ω–∏—è']
    };
    const [category, catText] = map[text];
    const tg = ctx.from.username ? '@' + ctx.from.username : '';
    const initialCount = 1;

    if (category === 'friendship') {
      await db.run(
        `INSERT OR REPLACE INTO users(chat_id, name, about, tg, category, count, creativity, gender)
         VALUES(?,?,?,?,?,?,NULL,NULL)`,
        [id, state.name, state.about, tg, category, initialCount]
      );
      await ctx.reply(
        `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
–í—ã –∏—â–µ—Ç–µ: ${catText}
–ò–º—è: ${state.name}
–û —Å–µ–±–µ: ${state.about}
–ö–æ–Ω—Ç–∞–∫—Ç: ${tg || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}
‚ûï –ó–∞—á–∏—Å–ª–µ–Ω–∞ 1 –≤—Å—Ç—Ä–µ—á–∞.`,
        Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
      );
      states.delete(id);
      return;
    }

    if (category === 'collab') {
      state.category = category;
      state.step = 'creativity';
      return ctx.reply('‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏:', Markup.removeKeyboard());
    }

    if (category === 'love') {
      state.category = category;
      state.step = 'gender';
      return ctx.reply(
        'üß≠ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
        Markup.keyboard([['–ú—É–∂—Å–∫–æ–π'], ['–ñ–µ–Ω—Å–∫–∏–π']])
          .resize()
          .oneTime(true)
      );
    }
    return;
  }

  // –ï—Å–ª–∏ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
  if (!db) {
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
  }
  const user = await new Promise(res =>
    db.get(`SELECT count, gender, creativity, name, about, tg FROM users WHERE chat_id = ?`, [id], (_, r) => res(r))
  );
  if (!user) {
    return beginRegistration(ctx);
  }
  if (user.count < 1) {
    return ctx.reply(
      '–í—Å—Ç—Ä–µ—á –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî –º–æ–∂–µ—Ç, –ø–æ —Å—Ç–∞–∫–∞–Ω—á–∏–∫—É PIMS? üçπ',
      Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
    );
  }

  const categoryMap = {
    'ü§ù –î—Ä—É–∂–±–∞':       'friendship',
    'üí° –°–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ': 'collab',
    '‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è':    'love'
  };
  const chosenCategory = categoryMap[text];

  if (chosenCategory === 'collab' && !user.creativity) {
    states.set(id, { step: 'meet_creativity', category: 'collab' });
    return ctx.reply('‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏:', Markup.removeKeyboard());
  }
  if (chosenCategory === 'love' && !user.gender) {
    states.set(id, { step: 'meet_gender', category: 'love' });
    return ctx.reply(
      'üß≠ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
      Markup.keyboard([['–ú—É–∂—Å–∫–æ–π'], ['–ñ–µ–Ω—Å–∫–∏–π']])
        .resize()
        .oneTime(true)
    );
  }

  return findAndSendPartner(id, chosenCategory);
});

// ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ
bot.on('text', async (ctx, next) => {
  const id = ctx.chat.id;
  const state = states.get(id);
  const text = ctx.message.text.trim();

  if (!state) {
    return next();
  }

  // –í–≤–æ–¥ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (state.step === 'creativity') {
    if (text.length === 0) {
      return ctx.reply('‚ùó –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (—Ç—Ä–∏ —Å–ª–æ–≤–∞).', Markup.removeKeyboard());
    }
    state.creativity = text;
    const tg = ctx.from.username ? '@' + ctx.from.username : '';
    await db.run(
      `INSERT OR REPLACE INTO users(chat_id, name, about, tg, category, count, creativity, gender)
       VALUES(?,?,?,?,?,?,?,NULL)`,
      [id, state.name, state.about, tg, state.category, 1, state.creativity]
    );
    await ctx.reply(
      `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
–í—ã –∏—â–µ—Ç–µ: –°–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ
–ò–º—è: ${state.name}
–û —Å–µ–±–µ: ${state.about}
–ö–æ–Ω—Ç–∞–∫—Ç: ${tg || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}
‚ûï –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ: ${state.creativity}
‚ûï –ó–∞—á–∏—Å–ª–µ–Ω–∞ 1 –≤—Å—Ç—Ä–µ—á–∞.`,
      Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
    );
    states.delete(id);
    return;
  }

  // –í–≤–æ–¥ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–±–æ—Ä–æ–º
  if (state.step === 'meet_creativity') {
    if (text.length === 0) {
      return ctx.reply('‚ùó –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (—Ç—Ä–∏ —Å–ª–æ–≤–∞).', Markup.removeKeyboard());
    }
    await db.run(`UPDATE users SET creativity = ? WHERE chat_id = ?`, [text, id]);
    states.delete(id);
    await ctx.reply('‚úÖ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ò—â–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞...', Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize());
    return findAndSendPartner(id, 'collab');
  }

  // –í–≤–æ–¥ –ø–æ–ª–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (state.step === 'gender') {
    const low = text.toLowerCase();
    if (low !== '–º—É–∂—Å–∫–æ–π' && low !== '–∂–µ–Ω—Å–∫–∏–π') {
      return ctx.reply('‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ú—É–∂—Å–∫–æ–π¬ª –∏–ª–∏ ¬´–ñ–µ–Ω—Å–∫–∏–π¬ª.', Markup.keyboard([['–ú—É–∂—Å–∫–æ–π'], ['–ñ–µ–Ω—Å–∫–∏–π']]).resize());
    }
    const tg = ctx.from.username ? '@' + ctx.from.username : '';
    await db.run(
      `INSERT OR REPLACE INTO users(chat_id, name, about, tg, category, count, creativity, gender)
       VALUES(?,?,?,?,?,?,NULL,?)`,
      [id, state.name, state.about, tg, state.category, 1, low]
    );
    await ctx.reply(
      `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
–í—ã –∏—â–µ—Ç–µ: –û—Ç–Ω–æ—à–µ–Ω–∏—è
–ò–º—è: ${state.name}
–û —Å–µ–±–µ: ${state.about}
–ö–æ–Ω—Ç–∞–∫—Ç: ${tg || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}
‚ûï –ü–æ–ª: ${text}
‚ûï –ó–∞—á–∏—Å–ª–µ–Ω–∞ 1 –≤—Å—Ç—Ä–µ—á–∞.`,
      Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
    );
    states.delete(id);
    return;
  }

  // –í–≤–æ–¥ –∏–º–µ–Ω–∏ (step === 'name')
  if (state.step === 'name') {
    if (text.length === 0) {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è (–º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ —Å–ª–æ–≤–æ).', Markup.removeKeyboard());
    }
    state.name = text;
    state.step = 'about';
    return ctx.reply('üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ –¥–≤—É–º—è —Å–ª–æ–≤–∞–º–∏:', Markup.removeKeyboard());
  }

  // –í–≤–æ–¥ ¬´–æ —Å–µ–±–µ¬ª (step === 'about')
  if (state.step === 'about') {
    if (text.length === 0) {
      return ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ —Ö–æ—Ç—è –±—ã –¥–≤—É–º—è —Å–ª–æ–≤–∞–º–∏.', Markup.removeKeyboard());
    }
    state.about = text;
    state.step = 'category';
    return ctx.reply(
      'üß≠ –ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?',
      Markup.keyboard([['ü§ù –î—Ä—É–∂–±–∞'], ['üí° –°–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'], ['‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è']])
        .resize()
        .oneTime(true)
    );
  }

  return next();
});

// ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∞ –ø—Ä–∏ ¬´–≤—Å—Ç—Ä–µ—á–µ¬ª ‚îÄ‚îÄ‚îÄ
bot.hears(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], async (ctx) => {
  const id = ctx.chat.id;
  const text = ctx.message.text.toLowerCase();
  const state = states.get(id);

  if (state && state.step === 'meet_gender') {
    await db.run(`UPDATE users SET gender = ? WHERE chat_id = ?`, [text, id]);
    states.delete(id);
    await ctx.reply(
      '‚úÖ –ü–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ò—â–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞...',
      Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
    );
    return findAndSendPartner(id, 'love');
  }
  return;
});

// ‚îÄ‚îÄ‚îÄ –§—É–Ω–∫—Ü–∏—è: –Ω–∞–π—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –æ–±–æ–∏—Ö ‚îÄ‚îÄ‚îÄ
async function findAndSendPartner(id, chosenCategory) {
  if (!db) {
    return bot.telegram.sendMessage(id, '‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize());
  }

  const initiator = await new Promise(res =>
    db.get(
      `SELECT name, about, tg, category, creativity, gender, count FROM users WHERE chat_id = ?`,
      [id],
      (_, r) => res(r)
    )
  );
  if (!initiator) {
    return bot.telegram.sendMessage(
      id,
      '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.',
      Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
    );
  }
  if (initiator.count < 1) {
    return bot.telegram.sendMessage(
      id,
      '–í—Å—Ç—Ä–µ—á –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî –º–æ–∂–µ—Ç, –ø–æ —Å—Ç–∞–∫–∞–Ω—á–∏–∫—É PIMS? üçπ',
      Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
    );
  }

  let rows;
  if (chosenCategory === 'love') {
    const targetGender = initiator.gender === '–º—É–∂—Å–∫–æ–π' ? '–∂–µ–Ω—Å–∫–∏–π' : '–º—É–∂—Å–∫–æ–π';
    rows = await new Promise(res =>
      db.all(
        `SELECT * FROM users WHERE category = ? AND gender = ? AND chat_id <> ?`,
        [chosenCategory, targetGender, id],
        (_, r) => res(r)
      )
    );
  } else {
    rows = await new Promise(res =>
      db.all(
        `SELECT * FROM users WHERE category = ? AND chat_id <> ?`,
        [chosenCategory, id],
        (_, r) => res(r)
      )
    );
  }
  if (!rows.length) {
    return bot.telegram.sendMessage(
      id,
      '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.',
      Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
    );
  }

  const filtered = await new Promise(res => {
    const placeholders = rows.map(() => '?').join(',');
    const ids = rows.map(r => r.chat_id);
    if (!ids.length) return res([]);
    db.all(
      `SELECT partner_id FROM pairs WHERE user_id = ? AND partner_id IN (${placeholders})`,
      [id, ...ids],
      (_, met) => {
        const metIds = new Set(met.map(m => m.partner_id));
        res(rows.filter(r => !metIds.has(r.chat_id)));
      }
    );
  });
  if (!filtered.length) {
    return bot.telegram.sendMessage(
      id,
      '–ù–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤—ã —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏).',
      Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
    );
  }

  const pick = filtered[Math.floor(Math.random() * filtered.length)];
  await db.run(`UPDATE users SET count = count - 1 WHERE chat_id = ?`, [id]);
  await db.run(`INSERT OR IGNORE INTO pairs(user_id, partner_id) VALUES(?,?)`, [id, pick.chat_id]);
  await db.run(`INSERT OR IGNORE INTO pairs(user_id, partner_id) VALUES(?,?)`, [pick.chat_id, id]);

  let notifyMsg = `üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á!

–ò–º—è: ${initiator.name}
–û —Å–µ–±–µ: ${initiator.about}
–ö–æ–Ω—Ç–∞–∫—Ç: ${initiator.tg || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}`;
  if (initiator.category === 'collab') {
    notifyMsg += `\n–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ: ${initiator.creativity}`;
  }
  if (initiator.category === 'love') {
    notifyMsg += `\n–ü–æ–ª: ${initiator.gender.charAt(0).toUpperCase() + initiator.gender.slice(1)}`;
  }
  await bot.telegram.sendMessage(pick.chat_id, notifyMsg).catch(() => {});

  let meetMsg = `üéâ –í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞:

–ò–º—è: ${pick.name}
–û —Å–µ–±–µ: ${pick.about}
–ö–æ–Ω—Ç–∞–∫—Ç: ${pick.tg || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}`;
  if (chosenCategory === 'collab') {
    meetMsg += `\n–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ: ${pick.creativity}`;
  }
  if (chosenCategory === 'love') {
    meetMsg += `\n–ü–æ–ª: ${pick.gender.charAt(0).toUpperCase() + pick.gender.slice(1)}`;
  }
  return bot.telegram.sendMessage(
    id,
    meetMsg,
    Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
  );
}

// ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥—ã /count –∏ /reset ‚îÄ‚îÄ‚îÄ
bot.command('count', (ctx) => {
  const id = ctx.chat.id;
  if (!db) {
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize());
  }
  db.get(`SELECT count FROM users WHERE chat_id = ?`, [id], (_, row) => {
    if (row) {
      return ctx.reply(
        `–£ –≤–∞—Å –≤—Å—Ç—Ä–µ—á: ${row.count}`,
        Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
      );
    } else {
      return beginRegistration(ctx);
    }
  });
});

bot.command('reset', (ctx) => {
  const id = ctx.chat.id;
  if (db) {
    db.run(`DELETE FROM users WHERE chat_id = ?`, [id]);
    db.run(`DELETE FROM meetings WHERE chat_id = ?`, [id]);
    db.run(`DELETE FROM pairs WHERE user_id = ? OR partner_id = ?`, [id, id]);
  }
  states.delete(id);
  return ctx.reply(
    'üßπ –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.',
    Markup.keyboard([['üöÄ –£—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É']]).resize()
  );
});

// ‚îÄ‚îÄ‚îÄ –≠–∫—Å–ø–æ—Ä—Ç handler‚Äô–∞ –¥–ª—è Vercel ‚îÄ‚îÄ‚îÄ
module.exports = async (req, res) => {
  if (req.method === 'POST') {
    try {
      await bot.handleUpdate(req.body);
      return res.status(200).send('OK');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update:', err);
      return res.status(500).send('Error');
    }
  }
  return res.status(200).send('OK');
};
